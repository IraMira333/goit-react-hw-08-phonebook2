{"version":3,"file":"static/js/734.e5568369.chunk.js","mappings":"8SAuDA,EAxCoB,SAAHA,GAAsB,IAAhBC,EAAQD,EAARC,SACfC,GAAWC,EAAAA,EAAAA,MAKjB,IAAMC,EAAeH,EAASI,MAH9B,SAAmBC,EAAGC,GACpB,OAAOD,EAAEE,KAAKC,cAAcF,EAAEC,KAChC,IAGA,OACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,CAAEC,SAAU,QAASC,WAAY,OAAQC,YAAa,QAASC,SACtEZ,EAAaa,KAAI,SAAAC,GAChB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAQ,CAAAJ,SAAA,EACPN,EAAAA,EAAAA,KAACW,EAAAA,EAAY,CAAAL,UACXN,EAAAA,EAAAA,KAACY,EAAAA,EAAgB,OAEnBZ,EAAAA,EAAAA,KAACa,EAAAA,EAAY,CAACC,QAASN,EAAQV,KAAMiB,UAAWP,EAAQQ,UACxDhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAU,CACTC,KAAK,MACL,aAAW,SACXC,QAAS,kBAAM3B,GAAS4B,EAAAA,EAAAA,IAAcZ,EAAQa,IAAI,EAACf,UAEnDN,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,QAVAd,EAAQa,GAc3B,KAGN,E,UCfA,EAvBe,WACb,IAAM7B,GAAWC,EAAAA,EAAAA,MAMjB,OACEO,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACRC,KAAK,QACLH,GAAG,iBACHI,MAAM,iBACNC,SATJ,SAAuBC,GACrBnC,GAASoC,EAAAA,EAAAA,IAAkBD,EAAEE,OAAOC,OACtC,EAQIC,QAAQ,WACR7B,GAAI,CACF8B,WAAY,QACZC,aAAc,MACdC,UAAW,QAInB,E,8BCxBe,SAASC,EAAK7C,GAA2B,IAAxB8C,EAAM9C,EAAN8C,OAAQC,EAAW/C,EAAX+C,YACtC,OACErC,EAAAA,EAAAA,KAACsC,EAAAA,EAAQ,CACPC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,KAAMN,EACNO,iBAAkB,IAClBC,QAASP,EAAY/B,UAErBN,EAAAA,EAAAA,KAAC6C,EAAAA,EAAK,CAACC,SAAS,UAASxC,SAAC,yDAKhC,C,aCKe,SAASyC,IACtB,IAAMxD,GAAWyD,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAmBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC/BC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAUN,EAAAA,EAAAA,IAAYO,EAAAA,IACtBC,GAAgBJ,IAAcE,GAAW/D,EAASkE,OAAS,EAC3DC,GAAkBN,IAAcE,GAA+B,IAApB/D,EAASkE,OACpDjE,GAAWC,EAAAA,EAAAA,MAEXkE,GAAiBX,EAAAA,EAAAA,IAAYY,EAAAA,IAWnC,OARAC,EAAAA,EAAAA,YAAU,WACRrE,GAASsE,EAAAA,EAAAA,MACX,GAAG,CAACtE,KAOFiB,EAAAA,EAAAA,MAACsD,EAAAA,EAAS,CACR7D,GAAI,CACF8D,QAAS,UACT5D,WAAY,IACZC,YAAa,IACb4D,WAAY,OACZC,UAAWC,EAAAA,EACXC,UAAW,SACX,6BAA8B,CAC5BjE,SAAUkE,EAAAA,IAEZ/D,SAAA,CAKD8C,IAAapD,EAAAA,EAAAA,KAACsE,EAAAA,EAAM,IACpBhB,IAAWtD,EAAAA,EAAAA,KAAA,KAAAM,SAAIgD,IAAc,IAC7BE,IACC/C,EAAAA,EAAAA,MAAA8D,EAAAA,SAAA,CAAAjE,SAAA,EACEN,EAAAA,EAAAA,KAACwE,EAAM,KACPxE,EAAAA,EAAAA,KAACyE,EAAW,CAAClF,SAAU2D,OAG1BQ,IAAkB1D,EAAAA,EAAAA,KAAA,KAAAM,SAAG,oCACtBN,EAAAA,EAAAA,KAACmC,EAAK,CAACC,OAAQuB,EAAgBtB,YA9BnC,WACE7C,GAASkF,EAAAA,EAAAA,MACX,MA+BF,C,6ECtEA,IAAMC,EAAWC,SAASC,KAAKC,cAAc,UACvCC,EAAWH,SAASC,KAAKC,cAAc,UAEvCE,EAAeL,EAASM,aACxBC,EAAeH,EAASE,aACxBE,EAAaP,SAASQ,gBAAgBH,aAE/Bd,EAAc,GAAAkB,OADNF,EAAaH,EAAeE,EACJ,MAChCb,EAAS,GAAAgB,OAAMT,SAASQ,gBAAgBE,YAAW,K","sources":["components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Snack/Snack.jsx","pages/ContactsPage.jsx","support/support.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport * as React from 'react';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\n\nimport { deleteContact } from 'redux/contacts';\n\nconst ContactList = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  function SortArray(x, y) {\n    return x.name.localeCompare(y.name);\n  }\n  const sortContacts = contacts.sort(SortArray);\n\n  return (\n    <List sx={{ maxWidth: '350px', marginLeft: 'auto', marginRight: 'auto' }}>\n      {sortContacts.map(contact => {\n        return (\n          <ListItem key={contact.id}>\n            <ListItemIcon>\n              <ContactPhoneIcon />\n            </ListItemIcon>\n            <ListItemText primary={contact.name} secondary={contact.number} />\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\n\nimport TextField from '@mui/material/TextField';\n\nimport { filterForContacts } from 'redux/contacts';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  function onFilterInput(e) {\n    dispatch(filterForContacts(e.target.value));\n  }\n\n  return (\n    <TextField\n      size=\"small\"\n      id=\"outlined-basic\"\n      label=\"Search name...\"\n      onChange={onFilterInput}\n      variant=\"outlined\"\n      sx={{\n        background: 'white',\n        borderRadius: '8px',\n        marginTop: '5px',\n      }}\n    />\n  );\n};\n\nexport default Filter;\n","import Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n\nexport default function Snack({ isOpen, handleClose }) {\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      open={isOpen}\n      autoHideDuration={3000}\n      onClose={handleClose}\n    >\n      <Alert severity=\"success\">\n        You have successfully added a contact to your list!\n      </Alert>\n    </Snackbar>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Container from '@mui/material/Container';\n//import Typography from '@material-ui/core/Typography';\n\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Spiner from 'components/Spiner/Spiner';\nimport Snack from 'components/Snack/Snack';\nimport {\n  addedContact,\n  getContacts,\n  selectContactIsAdded,\n  selectContacts,\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from 'redux/contacts';\nimport { minBoxHeightPx, pageWidth } from 'support/support';\n\nexport default function ContactsPage() {\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectError);\n  const showContacts = !isLoading && !isError && contacts.length > 0;\n  const showNoContacts = !isLoading && !isError && contacts.length === 0;\n  const dispatch = useDispatch();\n\n  const isContactAdded = useSelector(selectContactIsAdded);\n  //const [contactIsAdded, setContactIsAdded] = useState(false);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  function onClose() {\n    dispatch(addedContact());\n  }\n\n  return (\n    <Container\n      sx={{\n        bgcolor: '#cfe8fc',\n        marginLeft: '0',\n        marginRight: '0',\n        paddingTop: '10px',\n        minHeight: minBoxHeightPx,\n        textAlign: 'center',\n        '@media (min-width: 1200px)': {\n          maxWidth: pageWidth,\n        },\n      }}\n    >\n      {/* <Typography variant=\"h3\" color=\"primary\">\n        Contacts\n      </Typography> */}\n      {isLoading && <Spiner />}\n      {isError && <p>{isError}</p>}{' '}\n      {showContacts && (\n        <>\n          <Filter />\n          <ContactList contacts={filteredContacts} />\n        </>\n      )}\n      {showNoContacts && <p>You don't have any contact yet</p>}\n      <Snack isOpen={isContactAdded} handleClose={onClose} />\n    </Container>\n  );\n}\n","const headerEl = document.body.querySelector('header');\nconst footerEl = document.body.querySelector('footer');\n\nconst headerHeight = headerEl.clientHeight;\nconst footerHeight = footerEl.clientHeight;\nconst pageHeight = document.documentElement.clientHeight;\nconst minBoxHeight = pageHeight - headerHeight - footerHeight;\nexport const minBoxHeightPx = `${minBoxHeight}px`;\nexport const pageWidth = `${document.documentElement.clientWidth}px`;\n"],"names":["_ref","contacts","dispatch","useDispatch","sortContacts","sort","x","y","name","localeCompare","_jsx","List","sx","maxWidth","marginLeft","marginRight","children","map","contact","_jsxs","ListItem","ListItemIcon","ContactPhoneIcon","ListItemText","primary","secondary","number","IconButton","edge","onClick","deleteContact","id","DeleteIcon","TextField","size","label","onChange","e","filterForContacts","target","value","variant","background","borderRadius","marginTop","Snack","isOpen","handleClose","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","severity","ContactsPage","useSelector","selectContacts","filteredContacts","selectFilteredContacts","isLoading","selectIsLoading","isError","selectError","showContacts","length","showNoContacts","isContactAdded","selectContactIsAdded","useEffect","getContacts","Container","bgcolor","paddingTop","minHeight","minBoxHeightPx","textAlign","pageWidth","Spiner","_Fragment","Filter","ContactList","addedContact","headerEl","document","body","querySelector","footerEl","headerHeight","clientHeight","footerHeight","pageHeight","documentElement","concat","clientWidth"],"sourceRoot":""}